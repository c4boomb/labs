\input{../common/head.tex}
\input{config.tex}

\begin{document}

\import{1_title/}{title.tex}

\clearpage

\pagenumbering{gobble}
%\import{3_abstract/}{main.tex}

%\pagestyle{empty}
%\thispagestyle{empty}
%\tableofcontents

\clearpage
\pagenumbering{arabic}
\pagestyle{fancy}
\setcounter{page}{2}

\clearpage

\chapter{Задание}
\begin{itemize}
\item Зарегистрироваться на сайте GitHub, создать репозиторий, добавить в репозиторий код и данные из лабораторной работы №1, продемонстрировать навыки работы с системой контроля версий git на работе с проэктом GitHub;
\item создать веб-приложение с использованием модуля Spyre, которое позволит:
\begin{itemize}
\item выбрать часовой ряд VCI, TCI, VHI для наборы данных из лабораторной работы 1 (выпадающий список);
\item выбрать область, для которой будет выполняться анализ (выпадающий список);
\item указать интервал недель, за которые отбираются данные;
\item создать несколько вкладок для отображения таблицы с данными на графике хода индексов;
\end{itemize}
\item код разработанного приложения добавить к созданному репозиторию.
\end{itemize}

\chapter{Листинг кода}
\lstset{inputencoding=utf8, extendedchars=\true}
\lstinputlisting[language=C++,
                 basicstyle=\ttfamily\scriptsize]{../lab2.py}

\chapter{Пояснение}
Класс SimpleApp наследует сервер. В работе было сделано веб-приложение, которое содержит 3 вкладки (Plot, Table и Drought), то есть отображает таблицу, график и HTML (текст). Для этого были переопределены методы getData, getPlot и getHTML. Метод getData получает и генерирует данные, которые будут отображаться в таблице. Так же как getPlot и getHTML, он принимает на вход агрумент params, который является словарём, содержащим все входные переменные. Метод getData возвращает фрэйм с данными (pandas DataFrame), метод getPlot --- график, а метод getHTML --- строку.

Данные, которые необходимо вывести генерируются в данных методах на основе входных данных (inputs), которые указывабтся в полях ввода. В данной работе было использовано 8 таких полей с типами <<dropbox>> --- выпадающий список (выбор индекса и области), <<text>> --- текст (выбор года) и <<slider>> --- ползунок (выбор диапазона недель, значений индекса VHI, а также минимального процента области, где данный индекс имеет значение меньше 15).

Результатами (выходами, outputs) являются <<plot>>, <<table>> и <<html>>. Все результаты загружаются на страницу по умолчанию. Приложение требует множественный вывод, поэтому каждый результат находится на отдельной вкладке. 

В работе отображаются значения индексов VHI, THI и VHI для выбранной области за определённый период в виде таблицы и графика, каждый на своей вкладке. Также на вкладке Drought отображются года, когда индекс VHI и процент области с индексом VHI были в пределах выбранных значений.

\chapter*{Выводы}
\addcontentsline{toc}{chapter}{Выводы}
Spyre оказался удобным для создания веб-приложения, которое отображает таблицы и графики. Для проекта, который обрабатывает данные, удобно иметь простой и понятный интерфейс пользователя. Spyre даёт все необходимые инструменты, чтобы быстро превратить код Python в интерактивное веб-приложение.



\end{document}
